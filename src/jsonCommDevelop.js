/** JsonComm comments remover in JSON-like structures. Version with unused parts for develop */
var JsonComm = function(h){
	h = h ||{};
	h.altComm = h.altComm ||1; //match line comments as #... or //... only
	var ss = '"(?:\\\\"|[^\\r\\n"])*"' //string in quotes
		,sCom = '(?:(?:\\s*'+(h.altComm ?'(?:\\/\\/|#)':'\\/\\/') +'[^\\r\\n]*(\\r?\\n|$))*'
				+'(?:\\s*\\/\\*\\*\\/|\\s*\\/\\*(?:[\\s\\S]?(?!\\*\\/))+.{3})*'
			+')*' //comments separated by spaces
		,val = sCom +'(\\s*(?:[0-9.eE+-]+|true|false|null|'+ ss +'|(?!:\\{|:\\[))\\s*)';

	var rUnComm = /(?:((?:\{|,)\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*(\s*"(?:\\"|[^\r\n"])*"\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*(\s*:\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*(\s*(?:[0-9.eE+-]+|true|false|null|"(?:\\"|[^\r\n"])*"|(?!:\{|:\[))\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*(\s*(?:\}|(?!,))\s*)?)+?|(?:((?:\[|,)\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*(\s*(?:[0-9.eE+-]+|true|false|null|"(?:\\"|[^\r\n"])*"|(?!:\{|:\[))\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*(\s*(?:\]|(?!,))\s*)?)+?|(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*\s*/g; //example of compiled regexp for unComment

	var rComm2 = /(?:((?:\{|,)\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*((?:[\s\S]?(?!\*\/))+.).{2})*)*(\s*"(?:\\"|[^\r\n"])*"\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*((?:[\s\S]?(?!\*\/))+.).{2})*)*(\s*:\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*((?:[\s\S]?(?!\*\/))+.).{2})*)*(\s*(?:[0-9.eE+-]+|true|false|null|"(?:\\"|[^\r\n"])*"|(?!:\{|:\[))\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*((?:[\s\S]?(?!\*\/))+.).{2})*)*(\s*(?:\}|(?!,))\s*)?)+?|(?:((?:\[|,)\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*((?:[\s\S]?(?!\*\/))+.).{2})*)*(\s*(?:[0-9.eE+-]+|true|false|null|"(?:\\"|[^\r\n"])*"|(?!:\{|:\[))\s*)(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*((?:[\s\S]?(?!\*\/))+.).{2})*)*(\s*(?:\]|(?!,))\s*)?)+?|(?:(?:\s*(?:\/\/|#)[^\r\n]*(\r?\n|$))*(?:\s*\/\*\*\/|\s*\/\*((?:[\s\S]?(?!\*\/))+.).{2})*)*\s*/g;

	var rChange = /(?:((?:\{|,)\s*)((?:(?:\s*(?:\/\/|#)[^\r\n]*\r?\n|$)*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*)(\s*"(?:\\"|[^\r\n"])*"\s*)((?:(?:\s*(?:\/\/|#)[^\r\n]*\r?\n|$)*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*)(\s*:\s*)((?:(?:\s*(?:\/\/|#)[^\r\n]*\r?\n|$)*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*)(\s*(?:[0-9.eE+-]+|true|false|null|"(?:\\"|[^\r\n"])*"|(?!:\{|:\[))\s*)((?:(?:\s*(?:\/\/|#)[^\r\n]*\r?\n|$)*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*)(\s*(?:\}|(?!,))\s*)?)+?|(?:((?:\[|,)\s*)((?:(?:\s*(?:\/\/|#)[^\r\n]*\r?\n|$)*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*)(\s*(?:[0-9.eE+-]+|true|false|null|"(?:\\"|[^\r\n"])*"|(?!:\{|:\[))\s*)((?:(?:\s*(?:\/\/|#)[^\r\n]*\r?\n|$)*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*)(\s*(?:\]|(?!,))\s*)?)+?|((?:(?:\s*(?:\/\/|#)[^\r\n]*\r?\n|$)*(?:\s*\/\*\*\/|\s*\/\*(?:[\s\S]?(?!\*\/))+.{3})*)*)\s*/g;

	this._r = RegExp('(?:(?:'
		+'((?:\\{|,)\\s*)' //$1
		+ sCom +'(\\s*'+ ss +'\\s*)' //$2,3
		+ sCom +'(\\s*:\\s*)' //$4,5
		+ val //$6,7
		+ sCom +'(\\s*(?:\\}|(?!,))\\s*)?' //$8,9
	+')+?|(?:'
		+'((?:\\[|,)\\s*)' //$10
		+ val //$11,12
		+ sCom +'(\\s*(?:\\]|(?!,))\\s*)?' //$13,14
	+')+?|'
		+ sCom +'\\s*'
	+')','g');
};
JsonComm.prototype ={
	unComment: function(str){ //remove comments but not any syntax analysis for JSON
		return str.replace(this._r,'$1$2$3$4$5$6$7$8$9$10$11$12$13$14');
		//return ('\n'+ str).replace(this._r,'(1)$1(2)$2(3)$3(4)$4(5)$5(6)$6(7)$7(8)$8(9)$9(0)$10(11)$11(12)$12(13)$13(14)$14').replace(/^\n/,'');
	},
	comm2json: function(s){ //add keyName# keys with comments before keys with comments
		return this.unComment(s);
	},
	change: function(s, h){ //change key-values (by keys) from h object in string s
		;
	},
	fromYaml: function(s){ //with exceptions on errors
		;
	},
	fromXml: function(s){ //with exceptions on errors
		;
	},
	toYaml: function(s){ //with exceptions on errors
		;
	},
	toXml: function(s){ //with exceptions on errors
		;
	},
	to: function(h){ //hash to jsonComm
		;
	}
};
var jsonComm = new JsonComm();
//var jsonComm = new JsonComm({altComm:0}); //strict JS comments



